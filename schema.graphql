schema {
  query: Query
  mutation: Mutation
}

type Query {
  meetups(first: Int, after: String): MeetupConnection
  people(first: Int, after: String, interestedIn: String): PersonConnection
  node(id: ID!): Node
}

type Mutation {
  attendMeetup(input: AttendMeetupInput): AttendMeetupPayload
}

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  edges: [Edge]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
}

type MeetupConnection implements Connection {
  edges: [MeetupEdge]!
  pageInfo: PageInfo!
}

type MeetupEdge implements Edge {
  cursor: String!
  node: Meetup!
}

type Meetup implements Node {
  id: ID!
  name: String!
  location: Address!
  start: String!
  organiser: Person!
  presenter: Person!
  attendees: PersonConnection!
}

type Address {
  companyName: String!
  address: String!
  city: String!
  postcode: String!
}

type PersonConnection implements Connection {
  edges: [PersonEdge]!
  pageInfo: PageInfo!
}

type PersonEdge implements Edge {
  cursor: String!
  node: Person!
}

type Person implements Node {
  id: ID!
  name: String!
  companyName: String
  interests: [String]!
  meetupsAttending: MeetupConnection!
}

input AttendMeetupInput {
  meetupId: ID!
  attendeeId: ID!
  clientMutationId: String
}

type AttendMeetupPayload {
  meetup: Meetup
  attendee: Person
  clientMutationId: String
}
